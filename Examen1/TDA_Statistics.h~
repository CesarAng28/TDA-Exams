//
//  TDA_Statistics.h
//  
//
//  Creado por Rodrigo Garcia el 8 de octubre del 2020.
//

#ifndef TDA_Statistics_h
#define TDA_Statistics_h


/*
* System headers required by the following declarations
* (the implementation will import its specific dependencies):
*/

#include <stdio.h>
#include <stdlib.h>

/*
* Application specific headers required by the following declarations
* (the implementation will import its specific dependencies):
*/

/* Constants declarations. */

/* Set EXTERN macro: */

#ifndef TDA_Statistics_IMPORT
    #define EXTERN
#else
    #define EXTERN extern
#endif

/* Types declarations. */


/* Global variables declarations. */
#define COLUMNS 2


/* Function prototypes. */


/*
 *
 * La funcion vista_Menu proporciona al usuario un menu con la bienvenida y la forma de operar del sistema.
 * Pedira el nombre del archivo y se mandara al controlador
 *
 * @params
 *      void
        
 * @returns
        none
*/


EXTERN void vista_Menu(void);


/*
 *
 * La funcion controlador_Proceso settea todas las variables correspondientes y realiza las llamadas a la funciones.
 * 
 *
 * @params
 *      nombre_archivo (char *):
            nombre del archivo que busca abrirse
        
 * @returns
        none
*/


EXTERN void controlador_Proceso(char * nombre_archivo);


/*
 *
 * La funcion modelo_Archivo abre un archivo del nombre recibido en el modo recibido
 * 
 *
 * @params
 *     nombre_archivo (char *):
            Nombre del archivo a abrir
 *     modo (char *):
            modo de apertura del archivo

 * @returns
       Archivo abierto en el modo indicado
*/


EXTERN FILE * modelo_Archivo(char * nombre_archivo, char * modo);


/*
 *
 * La funcion modelo_Euler_Method predice la posicion de la persona en el bongee dependiendo de los valores dados
 * y la regresa al controlador para ser analizada
 *
 * @params
 *     Archivo (FILE *):
            Archivo que se va a leer
            
 * @returns
       array de floats con los valores del archivo
*/


EXTERN float * modelo_Lee_Archivo(FILE * Archivo);

/*
 *
 * La funcion modelo_Imprime_Archivo imprime una matriz recibida en una archivo CSV
 *
 * @params
 *     Archivo (FILE *):
            Puntero al archivo donde se imprimira la matriz
 *     columnas (size_t):
            Columnas de la matriz
 *     buffer[][columnas] (double):
            Matriz recibida para imprimir
 *     filas (size_t):
            Filas de la matriz

 * @returns
        void
*/

//EXTERN void modelo_Imprime_Archivo(FILE * Archivo, size_t columnas, double buffer[] [columnas], size_t filas);


/*
 * La funcion modelo_Nuevo_Archivo instacia un apuntador a un archivo nuevo
 *
 * @param
 *  nombre_archivo (char *):
        Nombre del archivo
 *  modo (char *):
        Modo en que sera abierto el archivo {r, rb, a, ab, w, wb}

 * @return 
        apuntador al archivo abierto.
*/

//EXTERN FILE * modelo_Nuevo_Archivo(char *nombre_archivo, char *modo);


/*
 *
 * La funcion modelo_Grafica genera un plot del archivo CSV previamente creado.
 *
 * @params
 *      nombre_archivo (* char):
            Archivo el cual sera graficado por GNUplot
        
 * @returns
        void
*/

//EXTERN void modelo_Grafica (char * nombre_archivo);



#undef TDA_Statistics_IMPORT
#undef EXTERN



#endif /* TDA_Statistics_h */
